(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
Clear[MakeNCopiesOfBEAMINP];
Options[MakeNCopiesOfBEAMINP]={
MyDeBugOpt->True
};
MakeNCopiesOfBEAMINP[InFN_String,InN_,OptionsPattern[]]:=Module[{
MyDeBug,UseID,UseText,FNList,UseFN,UseI
},
(* - *)
{MyDeBug}=OptionValue[{MyDeBugOpt}];
(* - *)
UseID=GetFileNumberIndex[InFN];
If[UseID=="",Print[];Return[];];
UseID=ToExpression[UseID];
(* - *)
If[!FileExistsQ[InFN],Print[];Return[];];
UseText=Import[InFN,"Lines"];
FNList=Table[
UseText[[4]]=ChangeRNGInFourthLineText[UseText[[4]]];
UseFN=ChangeFileIndexString[InFN,UseI];
Export[UseFN,UseText,"Lines"]
,{UseI,UseID+1,UseID+InN}];
FNList
];
(*
MakeNCopiesOfBEAMINP["C:\\egsnrc_mp\\BEAM_Acc_001\\BAA_001.egsinp",2
]
*)


(* ::Input::Initialization:: *)
Clear[ChangeFileIndexString];
ChangeFileIndexString[InFN_String,InID_]:=Module[{
OutFN
},
(*
 - *)
OutFN=StringReplace[FileNameTake[InFN],{
"_"~~NumberString~~"."->"_"
<>If[InID<100,"0",""]
<>If[InID<10,"0",""]
<>ToString[InID]
<>"."
}];
FileNameDrop[InFN]<>"\\"<>OutFN
];
(*
ChangeFileIndexString["C:\\egsnrc_mp\\BEAM_Acc_001\\BAA_001.egsinp",2]
*)


(* ::Input::Initialization:: *)
Clear[ChangeRNGInFourthLineText];
ChangeRNGInFourthLineText[InText_String]:=Module[{
UseText
},
(*
 - *)
UseText=StringSplit[InText,","];
UseText[[2]]=ToString[RandomInteger[{0,5000}]];
UseText[[3]]=ToString[RandomInteger[{0,5000}]];
StringReplace[ToString[UseText],{"{"->"","}"->""}]
];
(*
UseText=Import["C:\\egsnrc_mp\\BEAM_Acc_001\\BAA_001.egsinp","Lines"];
UseText=UseText[[4]];
Print[UseText]
ChangeRNGInFourthLineText[UseText
]
*)


(* ::Input::Initialization:: *)
Clear[GetFileNumberIndex];
GetFileNumberIndex[InFN_String]:=Module[{
x
},
(* - *)
x=StringCases[FileNameTake[InFN],"_"~~x:NumberString~~".":>x];
If[x=={},Return[""];];
First[x]
];
(*
GetFileNumberIndex["C:\\egsnrc_mp\\BEAM_Acc_001\\BAA_001.egsinp"]
*)


(* ::Input::Initialization:: *)
Clear[SetBEAMINPFileToFirstPass];
SetBEAMINPFileToFirstPass[InFN_String]:=Module[{
UseText,ModText
},
(* - *)
UseText=Import[InFN,"Lines"];
ModText=UseText[[3]];
ModText=StringSplit[ModText,","];
ModText[[3]]="0";
ModText=StringReplace[ToString[ModText],{"  "->" ","{"->"","}"->""}];
UseText[[3]]=ModText;
Export[InFN,UseText,"Lines"];
];
(*
SetBEAMINPFileToFirstPass["C:\\egsnrc_mp\\BEAM_Acc_001\\BAA_002.egsinp"
]*)


(* ::Input::Initialization:: *)
Clear[SetBEAMINPFileToRestart];
SetBEAMINPFileToRestart[InFN_String]:=Module[{
UseText,ModText
},
(* - *)
UseText=Import[InFN,"Lines"];
ModText=UseText[[3]];
ModText=StringSplit[ModText,","];
ModText[[3]]="1";
ModText=StringReplace[ToString[ModText],{"  "->" ","{"->"","}"->""}];
UseText[[3]]=ModText;
Export[InFN,UseText,"Lines"];
];
(*
SetBEAMINPFileToRestart["C:\\egsnrc_mp\\BEAM_Acc_001\\BAA_003.egsinp"]
*)


(* ::Input::Initialization:: *)
Clear[CreateBEAMBatchFile];
Options[CreateBEAMBatchFile]={
MyDeBugOpt->False
,InPEGSFileOpt->"521icru.pegs4dat"
,InBeamModelNameOpt->"Acc_001"
,InPriorityOpt->"low"
,InWaitForCompletionOpt->False
};
CreateBEAMBatchFile[InFNList_List,InFN_String,OptionsPattern[]]:=Module[{
MyDeBug,InPEGSFile,InBeamModelName,InPriority,InWaitForCompletion
,UseFN,OutText,UseI,IMax,UseDir
,BatchText="start \"MODEL INPUT\" /b /PRIORITY BEAM_MODEL.exe -p PEGS -i INPUT"
},
(* - *)
{MyDeBug,InPEGSFile,InBeamModelName,InPriority,InWaitForCompletion
}=OptionValue[{MyDeBugOpt,InPEGSFileOpt,InBeamModelNameOpt,InPriorityOpt,InWaitForCompletionOpt
}];
(* - *)
If[MyDeBug,Print[
"Entering  ----------------> CreateBEAMBatchFile","\n"
,"InFNList  ----------------> ",InFNList,"\n"
,"InFN  --------------------> ",InFN,"\n"
,"InPEGSFile  --------------> ",InPEGSFile,"\n"
,"InBeamModelName  ---------> ",InBeamModelName,"\n"
,"InPriority  --------------> ",InPriority
];];
(* - *)
UseFN=(FileNameTake[#]&)/@InFNList;
UseFN=(FileBaseName[#]&)/@UseFN;
(* - *)
IMax=Length[UseFN];
OutText=Table[
StringReplace[BatchText,{
"MODEL"->InBeamModelName
,"PEGS"->StringReplace[InPEGSFile,{".pegs4dat"->""}]
,"INPUT"->UseFN[[UseI]]
,"PRIORITY"->InPriority
,""->""
,""->""
}]
,{UseI,IMax}];
If[InWaitForCompletion,
OutText=(StringReplace[#,{"/b"->"/wait"}]&)/@OutText;
];
(*
Export[InFN,OutText,"Lines"]
*)
Export["C:\\egsnrc_mp\\BEAM_"<>InBeamModelName<>"\\"<>InFN,OutText,"Lines"]
];
(*
UseFN=FileNames["C:\\egsnrc_mp\\BEAM_Acc_001\\BAA_00*.egsinp"];
UseFN=(FileNameTake[#]&)/@UseFN;
CreateBEAMBatchFile[UseFN,"0BAA_xxx.bat"
,MyDeBugOpt\[Rule]True
]
*)


(* ::Input::Initialization:: *)
Clear[SetBEAMINPNumberHistories];
SetBEAMINPNumberHistories[InFN_String,InHist_]:=Module[{
UseText,ModText
},
(* - *)
UseText=Import[InFN,"Lines"];
ModText=UseText[[4]];
ModText=StringSplit[ModText,","];
ModText[[1]]=ToString[InHist];
ModText=StringReplace[ToString[ModText],{"  "->" ","{"->"","}"->""}];
UseText[[4]]=ModText;
Export[InFN,UseText,"Lines"];
];
(*
SetBEAMINPNumberHistories["C:\\egsnrc_mp\\BEAM_Acc_001\\BAA_003.egsinp",10000
]
*)


(* ::Input::Initialization:: *)
Clear[MyFortranSciFormat];
Options[MyFortranSciFormat]={
MyDeBugOpt->False
,MyFormatOpt->{10,4}
};
MyFortranSciFormat[MyNumberIn_,MyInOptions___]:=Module[{
MyDeBug
,MyExponent
,MyMantissa
,MyFormat
,MyFrontSpacePad
,MyZeroPad
,MyStringLength
,MyIsNegative
},
MyDeBug=MyDeBugOpt/.{MyInOptions}/.Options[MyFortranSciFormat];
MyFormat=MyFormatOpt/.{MyInOptions}/.Options[MyFortranSciFormat];
If[MyDeBug,Print["MyDeBug -> ",MyDeBug];];
If[MyDeBug,Print["MyFormat -> ",MyFormat];];
MyExponent=MantissaExponent[MyNumberIn][[2]];
MyMantissa=MantissaExponent[MyNumberIn][[1]];
MyIsNegative=If[MyMantissa<0,1,0];
MyMantissa=ToString[MyMantissa];
If[StringLength[MyMantissa]-2-MyIsNegative<MyFormat[[2]],
While[StringLength[MyMantissa]-2-MyIsNegative<MyFormat[[2]],MyMantissa=MyMantissa<>"0";
];
,While[StringLength[MyMantissa]-2-MyIsNegative>MyFormat[[2]],MyMantissa=StringDrop[MyMantissa,-1];];
];
MyStringLength=StringLength[MyMantissa<>"E"<>ToString[MyExponent]];
MyMantissa<>"E"<>ToString[MyExponent]
];
(*MyFortranSciFormat[1.7*10^-25]*)


(* ::Input::Initialization:: *)
Clear[WriteGaussianSpectraForEGS];
Options[WriteGaussianSpectraForEGS]={
WidthsToDefineOpt->4.
,NumberBinsToDefineOpt->50.
,SpectrumDirNameOpt->"C:\\egsnrc_mp\\001_Spectra\\"
};
WriteGaussianSpectraForEGS[InE_,InW_,OptionsPattern[]]:=Module[{
WidthsToDefine,NumberBinsToDefine,SpectrumDirName
,EVals,x,UseSpectrum,UseFN,IDFile,UseI
},
{WidthsToDefine,NumberBinsToDefine,SpectrumDirName
}=OptionValue[{WidthsToDefineOpt,NumberBinsToDefineOpt,SpectrumDirNameOpt
}];
EVals=Table[x,{x,InE-WidthsToDefine*InW,InE+WidthsToDefine*InW,(WidthsToDefine*InW)/(NumberBinsToDefine-1)}];
EVals=Select[EVals,(#>0&)];
UseSpectrum=({#
,Exp[-((#-InE)^2)/(InW)^2]/(2*InW)
}&)/@EVals;
UseFN=FileNameJoin[{SpectrumDirName
,"Gaussian_E"
<>If[InE<10,"0",""]
<>ToString[InE]
<>If[StringTake[ToString[InE],-1]==".","0",""]
<>"_W"<>ToString[InW]<>".spectrum"}
];
(*Print[UseFN];*)
IDFile=OpenWrite[UseFN];
WriteString[IDFile,"Gaussian Spectrum With E0 = "<>ToString[InE]
<>"MeV  Width = "<>ToString[InW]
<>"\n     "<>ToString[Length[EVals]]<>",  0, 1"
<>"\n"
];
Do[
WriteString[IDFile,"      "<>ToString[MyFortranSciFormat[UseSpectrum[[UseI,1]]]]<>" , "];
WriteString[IDFile,ToString[MyFortranSciFormat[UseSpectrum[[UseI,2]]]]<>"\n"];
,{UseI,Length[UseSpectrum]}];
Close[IDFile];
UseSpectrum
];
(*
ListPlot[
WriteGaussianSpectraForEGS[18.,0.5]
,Joined\[Rule]True,PlotRange\[Rule]All
,GridLines\[Rule]{{18-0.5,18+0.5},{0.5}}
]
*)
